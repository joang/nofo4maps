/* taylor Version 2.2, Feb 9, 2024 */
/* Using coef lib: MY_FLOAT */
/* Using jet lib: jet_tree. m symbol, degree n */
/************************************************************************
 *
 *  A sample taylor.h
 *     Here is a list of macros/functions needed to compile the auto
 *     generated taylor polynomial procedure.  
 *
 */


#ifdef __cplusplus
extern "C"
{
#endif
/***********************************************************************
 *
 * Code generated by the TAYLOR translator.
 */

#ifndef _NUMBER_OF_JET_VARS_
#define _NUMBER_OF_STATE_VARS_         4
#define _NUMBER_OF_JET_VARS_           4
#define _NUMBER_OF_MAX_SYMBOLS_        2
#define _MAX_DEGREE_OF_JET_VARS_       15
#define _JET_COEFFICIENTS_COUNT_TOTAL_ 136
#define _MAX_SIZE_OF_JET_VAR_          136
#endif

#ifndef _NUMBER_OF_CLOUD_VARS_
#define _NUMBER_OF_CLOUD_VARS_         0
#define _MAX_CLOUD_SIZE_               0
#endif

#ifndef _TAYLOR_H_
#define _TAYLOR_H_
#include <stdio.h>
#include <stdlib.h>
#include <complex.h>
typedef double complex MY_FLOAT;

#include <math.h>
#include <string.h>
#include <ctype.h>
/*
 *  MY_FLOAT is the data type to be used in computing derivatives. 
 *  It may be 'float', 'double' or user defined private data types
 *  like 'long double', 'complex', 'complex128', etc. 
 */

#define _USE__COMPLEX_
//#define MY_FLOAT  double complex

#define   InitMyFloat(r)            {}
#define   ClearMyFloat(r)           {}

/* assign b to a */
#define   AssignMyFloat(a, b)       (a)=(b)

/* create a MY_FLOAT from a, assigne to r. a is an integer or a float */
#define   MakeMyFloatA(r,a)         (r)=(double complex)(a)

/* create a MY_FLOAT from a, assign to r and return r */
#define   MakeMyFloatB(r,a)         (MakeMyFloatA(r,a),r)

/* create a MY_FLOAT from a, a is an integer or a float, s is its string representation */
#define   MakeMyFloatC(r,s,a)       MakeMyFloatA(r,a)
/* addition r=a+b   */
#define   AddMyFloatA(r,a,b)        (r=(a)+(b))
#define   AddMyFloatD(r,a,b)        AddMyFloatA(r,a,b)
#define   AddMyFloatSI(r,a,b)       AddMyFloatA(r,a,b)

/* substraction r=a-b */
#define   SubtractMyFloatA(r,a,b)   (r=(a)-(b))
#define   SubtractMyFloatD(r,a,b)   SubtractMyFloatA(r,a,b)
#define   SubtractMyFloatSI(r,a,b)  SubtractMyFloatA(r,a,b)
#define   SubtractDMyFloat(r,a,b)   SubtractMyFloatA(r,a,b)
#define   SubtractSIMyFloat(r,a,b)  SubtractMyFloatA(r,a,b)

/* multiplication r=a*b */
#define   MultiplyMyFloatA(r,a,b)   (r=(a)*(b))
#define   MultiplyMyFloatD(r,a,b)   MultiplyMyFloatA(r,a,b)
#define   MultiplyMyFloatSI(r,a,b)  MultiplyMyFloatA(r,a,b)

/* division r=a/b */
#define   DivideMyFloatA(r,a,b)     (r=(a)/(b))
#define   DivideMyFloatD(r,a,b)     (r=(a)/(double)(b))
#define   DivideMyFloatSI(r,a,b)    DivideMyFloatD(r,a,b)
#define   DivideDMyFloat(r,a,b)     (r=(double)(a)/(b))
#define   DivideSIMyFloat(r,a,b)    DivideDMyFloat(r,a,b)

/* division by an integer r=a/i */
#define   DivideMyFloatByInt(r,a,i) (r=(a)/(double)(i))
/* negation r=-a*/
#define   NegateMyFloatA(r,a)       (r= -(a))

/* square root r=sqrt(a) */
#define   sqrtMyFloatA(r,a)         (r=csqrt(a))

/* exponentiation r=a^b, b is an integer */
#define   ExponentiateMyFloatIA(r,a,b)  (r=cpow((a),(b)))

/* exponentiation r=a^b */
#define   ExponentiateMyFloatA(r,a,b)  (r=cpow((a),(b)))
/* sin(a)  r=sin(a) */
#define   sinMyFloatA(r,a)          (r=csin((a)))
/* cos(a)  r=cos(a) */
#define   cosMyFloatA(r,a)          (r=ccos((a)))
/* tan(a)  r=tan(a) */
#define   tanMyFloatA(r,a)          (r=ctan((a)))
/* atan(a) r=atan(a) */
#define   atanMyFloatA(r,a)         (r=catan((a)))
/* exp(a)  r=exp(a) */
#define   expMyFloatA(r,a)          (r=cexp((a)))
/* log(a)  r=log(a) */
#define   logMyFloatA(r,a)          (r=clog((a)))
/* sinh(a) r=sinh(a) */
#define   sinhMyFloatA(r,a)         (r=csinh(a))
/* cosh(a) r=cosh(a) */
#define   coshMyFloatA(r,a)         (r=ccosh(a))
/* tanh(a) r=tanh(a) */
#define   tanhMyFloatA(r,a)         (r=ctanh(a))


/* log10(a)  r=log10(a) */
#define   log10MyFloatA(r,a)        (r=clog10(a))
/* fabs(a) r=fabs(a) */
#define   fabsMyFloatA(r,a)         (r=cabs(a))

/* convert to int */
#define   MyFloatToInt(ir,fa)       (ir=(int)(fa)))
/* convert to double */
#define   MyFloatToDouble(dr,fa)    (dr=(double)(fa))


/* boolean operation*/
#define   MyFloatA_GE_B(a,b)        (creal(a)>=creal(b))
#define   MyFloatA_GT_B(a,b)        (creal(a)> creal(b))
#define   MyFloatA_LE_B(a,b)        (creal(a)<=creal(b))
#define   MyFloatA_LT_B(a,b)        (creal(a)< creal(b))
#define   MyFloatA_EQ_B(a,b)        (creal(a)==creal(b))
#define   MyFloatA_NEQ_B(a,b)       (creal(a)!=creal(b))
#define   MyFloatA_CMP_B(a,b)       (creal(a)-creal(b))
#define   MyFloatA_CMPABS_B(a,b)    (fabs(creal(a))-fabs(creal(b)))


#define   OutputMyFloat3(file,fmt,a) fprintf(file,fmt,(double)creal(a), (double)cimag(a))
#define   OutputMyFloat(a)           fprintf(stdout,"%g,%g ",(double)creal(a), (double)cimag(a))

#define   InputMyFloat3(file,fmt,a)  fscanf(file,fmt,(double*)&(a),((double*)&(a))+1)
#define   InputMyFloat(a)            InputMyFloat3(stdin,"%lf,%lf ",a)

#define   StringToMyFloat4(s,fmt,a,n) (sscanf(s,fmt,(double*)&(a),((double*)&(a))+1,n),(s)+*(n))
#define   StringToMyFloat3(s,fmt,a)  sscanf(s,fmt,(double*)&(a),((double*)&(a))+1)
#define   StringToMyFloat(s,a)       StringToMyFloat3(s,"%lf,%lf ",a)

/************************************************************************/

#endif

/*** MY_COEF ***/
#ifndef _MY_COEF_H_
#define _MY_COEF_H_

#define _MY_COEF_MAX_NUM_SYMBOLS_ 0
#define _MY_COEF_MAX_DEGREE_ 0
#define _MY_COEF_TOTAL_COEFFICIENTS_COUNT_ 1
#define MY_COEF MY_FLOAT



#define MY_COEF_FUN(x) mycoef_myfloat_ ## x ## _ode
#endif /* _MY_COEF_H_ */


/*** MY_JET ***/
#ifndef _MY_JET_H_
#define _MY_JET_H_

static int _jet_tree_tr_idx_map_ode_[] = {\
  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\
 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,\
120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135, -1};
#define MY_JET_DATA(x,i) (((x)->coef)[_jet_tree_tr_idx_map_ode_[i]])
/* HEADER jet_tree_t_ode */
 
#include <stdio.h>

typedef struct jet_tree_t_ode_node
{
  int nsymb, deg;
  MY_COEF *coef;
  struct jet_tree_t_ode_node *term;
} jet_tree_t_ode_node;
typedef jet_tree_t_ode_node* jet_tree_ptr_ode_node;


typedef jet_tree_t_ode_node* jet_tree_t_ode;
//#define jet_tree_ptr_ode jet_tree_t_ode
typedef jet_tree_t_ode* jet_tree_ptr_ode;

int* jet_tree_monomial_counts_ode(void);
int* jet_tree_monomial_offsets_ode(void);

void jet_tree_initup2_ode(int, int);
#define jet_tree_initup_ode() jet_tree_initup2_ode(_NUMBER_OF_MAX_SYMBOLS_,_MAX_DEGREE_OF_JET_VARS_)
size_t jet_tree_init_ode(jet_tree_ptr_ode);
void jet_tree_clean_ode(jet_tree_ptr_ode);
void jet_tree_cleanup_ode(void);

int jet_tree_get_num_symbs_ode(void);
int jet_tree_get_deg_ode(void);
int jet_tree_set_num_symbs_ode(int);
int jet_tree_set_deg_ode(int);

/* assign */
void jet_tree_set_ode(jet_tree_t_ode, jet_tree_t_ode);

void jet_tree_set_coef_ode(jet_tree_t_ode, MY_COEF);
void jet_tree_set_myfloat_ode(jet_tree_t_ode, MY_FLOAT);
void jet_tree_set_d_ode(jet_tree_t_ode, double);
void jet_tree_set_si_ode(jet_tree_t_ode, int);

void jet_tree_set_coef_array_ode(jet_tree_t_ode, MY_COEF*);
void jet_tree_set_jet_2_coef_array_ode(MY_COEF*, jet_tree_t_ode);

void jet_tree_set_myfloat_array_ode(jet_tree_t_ode, MY_FLOAT*);
void jet_tree_set_jet_2_myfloat_array_ode(MY_FLOAT*, jet_tree_t_ode);

MY_FLOAT* jet_tree_to_myfloat_ode(jet_tree_t_ode);

void jet_tree_eval_ode(MY_COEF[1], jet_tree_t_ode, MY_FLOAT[]);

/* access to coef */
MY_COEF* jet_tree_get_coef_ode(jet_tree_t_ode, const int[]);
MY_COEF* jet_tree_coef0_ode(jet_tree_t_ode);
MY_COEF* jet_tree_coef1_ode(jet_tree_t_ode, int);

/* norms */
void jet_tree_nrminf_ode(MY_FLOAT[1], jet_tree_t_ode);
void jet_tree_nrm2_ode(MY_FLOAT[1], jet_tree_t_ode);

/* elemental arithmetic */
void jet_tree_neg_ode(jet_tree_t_ode, jet_tree_t_ode);

void jet_tree_add2_ode(jet_tree_t_ode, jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_sub2_ode(jet_tree_t_ode, jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_mul2_ode(jet_tree_t_ode, jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_div2_ode(jet_tree_t_ode, jet_tree_t_ode, jet_tree_t_ode);

void jet_tree_add2_coef_ode(jet_tree_t_ode, jet_tree_t_ode, MY_COEF);
void jet_tree_sub2_coef_ode(jet_tree_t_ode, jet_tree_t_ode, MY_COEF);
void jet_tree_coef_sub2_ode(jet_tree_t_ode, MY_COEF, jet_tree_t_ode);
void jet_tree_mul2_coef_ode(jet_tree_t_ode, jet_tree_t_ode, MY_COEF);
void jet_tree_div2_coef_ode(jet_tree_t_ode, jet_tree_t_ode, MY_COEF);
void jet_tree_coef_div2_ode(jet_tree_t_ode, MY_COEF, jet_tree_t_ode);

void jet_tree_add2_myfloat_ode(jet_tree_t_ode, jet_tree_t_ode, MY_FLOAT);
void jet_tree_sub2_myfloat_ode(jet_tree_t_ode, jet_tree_t_ode, MY_FLOAT);
void jet_tree_myfloat_sub2_ode(jet_tree_t_ode, MY_FLOAT, jet_tree_t_ode);
void jet_tree_mul2_myfloat_ode(jet_tree_t_ode, jet_tree_t_ode, MY_FLOAT);
void jet_tree_div2_myfloat_ode(jet_tree_t_ode, jet_tree_t_ode, MY_FLOAT);
void jet_tree_myfloat_div2_ode(jet_tree_t_ode, MY_FLOAT, jet_tree_t_ode);

void jet_tree_add2_d_ode(jet_tree_t_ode, jet_tree_t_ode, double);
void jet_tree_sub2_d_ode(jet_tree_t_ode, jet_tree_t_ode, double);
void jet_tree_d_sub2_ode(jet_tree_t_ode, double, jet_tree_t_ode);
void jet_tree_mul2_d_ode(jet_tree_t_ode, jet_tree_t_ode, double);
void jet_tree_div2_d_ode(jet_tree_t_ode, jet_tree_t_ode, double);
void jet_tree_d_div2_ode(jet_tree_t_ode, double, jet_tree_t_ode);

void jet_tree_add2_si_ode(jet_tree_t_ode, jet_tree_t_ode, int);
void jet_tree_sub2_si_ode(jet_tree_t_ode, jet_tree_t_ode, int);
void jet_tree_si_sub2_ode(jet_tree_t_ode, int, jet_tree_t_ode);
void jet_tree_mul2_si_ode(jet_tree_t_ode, jet_tree_t_ode, int);
void jet_tree_div2_si_ode(jet_tree_t_ode, jet_tree_t_ode, int);
void jet_tree_si_div2_ode(jet_tree_t_ode, int, jet_tree_t_ode);

/* elemental functions */
void jet_tree_set_sqrt_ode(jet_tree_t_ode, jet_tree_t_ode);
//#define jet_tree_sqrt_ode jet_tree_set_sqrt_ode

void jet_tree_set_pow_myfloat_ode(jet_tree_t_ode, jet_tree_t_ode, MY_FLOAT);
//#define jet_tree_pow_myfloat_ode jet_tree_set_pow_myfloat_ode

void jet_tree_set_exp_ode(jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_set_log_ode(jet_tree_t_ode, jet_tree_t_ode);
//#define jet_tree_exp_ode jet_tree_set_exp_ode
//#define jet_tree_log_ode jet_tree_set_log_ode

void jet_tree_set_sin_ode(jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_set_cos_ode(jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_set_tan_ode(jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_set_atan_ode(jet_tree_t_ode, jet_tree_t_ode);
//#define jet_tree_sin_ode  jet_tree_set_sin_ode
//#define jet_tree_cos_ode  jet_tree_set_cos_ode
//#define jet_tree_tan_ode  jet_tree_set_tan_ode
//#define jet_tree_atan_ode jet_tree_set_atan_ode

void jet_tree_set_sinh_ode(jet_tree_t_ode, jet_tree_t_ode);
void jet_tree_set_cosh_ode(jet_tree_t_ode, jet_tree_t_ode);
//#define jet_tree_sinh_ode jet_tree_set_sinh_ode
//#define jet_tree_cosh_ode jet_tree_set_cosh_ode

void jet_tree_set_fabs_ode(jet_tree_t_ode, jet_tree_t_ode);
//#define jet_tree_fabs_ode jet_tree_set_fabs_ode

/* I/O handles */
void jet_tree_fprintf_ode(FILE *file, const char *, jet_tree_t_ode);
#define jet_tree_printf_ode(fmt,a) jet_tree_fprintf_ode(stdout,fmt,a)

void jet_tree_fscanf_ode(FILE *file, const char *, jet_tree_t_ode);
void jet_tree_sscanf_ode(const char *, const char *, jet_tree_t_ode);


/* advanced functions (in testing) */
void jet_tree_compo_ode(jet_tree_t_ode, jet_tree_t_ode, jet_tree_t_ode*);
void jet_tree_reverse_ode(jet_tree_t_ode*, jet_tree_t_ode*);
void jet_tree_algT_ode(jet_tree_t_ode*, jet_tree_t_ode*, jet_tree_t_ode*);
void jet_tree_genidx_ode(int[], int);

/* Macros used in the integration */
typedef jet_tree_t_ode MY_JET;
#define InitUpJet2(nsymbs,deg)     jet_tree_initup2_ode(nsymbs,deg)
#define InitUpJet()                InitUpJet2(_NUMBER_OF_MAX_SYMBOLS_,_MAX_DEGREE_OF_JET_VARS_)
#define InitJet(a)                 jet_tree_init_ode(&(a))
#define ClearJet(a)                jet_tree_clean_ode(&(a))
#define ClearUpJet()               jet_tree_cleanup_ode()
#define GetJetVarDegree()          jet_tree_get_deg_ode()
#define GetJetNumSymbols()         jet_tree_get_num_symbs_ode()
#define SetJetVarDegree(a)         jet_tree_set_deg_ode(a)
#define SetJetNumSymbols(a)        jet_tree_set_num_symbs_ode(a)
#define InitJetParameter(a,i)      undefined

#define NormJet(a,x)               {MakeMyFloatC(a,"0",0);jet_tree_nrminf_ode(&(a),x);}
#define NormJet2(a,x)              {MakeMyFloatC(a,"0",0);jet_tree_nrm2_ode(&(a),x);}

#define NegateJetA(t,s)            jet_tree_neg_ode(t,s)
#define AssignJetToFloat(t,s)      AssignMyFloat(t,*jet_tree_to_myfloat_ode(s))
#define AssignFloatToJet(t,f)      jet_tree_set_myfloat_ode(t,f)


#define AssignJetToFloatArray(t,s)  jet_tree_set_jet_2_myfloat_array_ode(t,s)
#define AssignFloatArrayToJet(t,f)  jet_tree_set_myfloat_array_ode(t,f)


#define AssignJetToJet(t,s)        jet_tree_set_ode(t,s)
#define AddJetJetA(t,a,b)          jet_tree_add2_ode(t,a,b)
#define AddFloatJetA(t,a,b)        jet_tree_add2_myfloat_ode(t,b,a)
#define AddJetFloatA(t,a,b)        jet_tree_add2_myfloat_ode(t,a,b)

#define MultiplyJetFloatA(t,a,b)   jet_tree_mul2_myfloat_ode(t,a,b)
#define MultiplyJetJetA(t,a,b)     jet_tree_mul2_ode(t,a,b)
#define MultiplyFloatJetA(t,a,b)   jet_tree_mul2_myfloat_ode(t,b,a)

#define DivideFloatJetA(t,a,b)     jet_tree_myfloat_div2_ode(t,a,b)
#define DivideJetJetA(t,a,b)       jet_tree_div2_ode(t,a,b)
#define DivideJetFloatA(t,a,b)     jet_tree_div2_myfloat_ode(t,a,b)

#define SubtractFloatJetA(t,a,b)   jet_tree_myfloat_sub2_ode(t,a,b)
#define SubtractJetFloatA(t,a,b)   jet_tree_sub2_myfloat_ode(t,a,b)
#define SubtractJetJetA(t,a,b)     jet_tree_sub2_ode(t,a,b)

#define ExponentiateJetCstA(t,s,e) jet_tree_set_pow_myfloat_ode(t,s,e)

#define cosJetA(t,a)               jet_tree_set_cos_ode(t,a)
#define sinJetA(t,a)               jet_tree_set_sin_ode(t,a)
#define sqrtJetA(t,a)              jet_tree_set_sqrt_ode(t,a)
#define tanJetA(r,a)               jet_tree_set_tan_ode(r,a)
#define atanJetA(r,a)              jet_tree_set_atan_ode(r,a)
#define expJetA(r,a)               jet_tree_set_exp_ode(r,a)
#define logJetA(r,a)               jet_tree_set_log_ode(r,a)
#define sinhJetA(r,a)              jet_tree_set_sinh_ode(r,a)
#define coshJetA(r,a)              jet_tree_set_cosh_ode(r,a)
#define tanhJetA(r,a)              undefined
#define log10JetA(r,a)             undefined

#define InputJetFromString(t,a)    taylor_input_jet_from_string(t,a)
#define InputJet(t,a,b)            taylor_input_jet_from_stdin(t,b)
#define OutputJet2File(file,fmt,t) jet_tree_fprintf_ode(file,fmt,t)
#define OutputJet(fmt,t)           OutputJet2File(stdout,fmt,t)
#define InputFile2Jet(file,fmt,t) jet_tree_fscanf_ode(file,fmt,t)

#define EvalJet(v,x,s)             jet_tree_eval_ode(&(v),x,s)
#define JetCoefficient(x,idx)      jet_tree_get_coef_ode(x,idx)
/* END MACROS MY_JET */

/* END HEADER jet_tree_t_ode */

#define MY_JET_FUN(x) jet_tree_ ## x ## _ode
#endif /* _MY_JET_H_ */

/* JET IO Helpers */

/* Set Jet values  */
int taylor_make_jet(MY_JET a, MY_COEF *mycoefs, MY_FLOAT *myfloats, double *values);
int taylor_make_identity_jets(MY_JET *inOut, MY_COEF *mycoefs, MY_FLOAT *myfloats, double *values);
int taylor_make_unit_jet(MY_JET a, int idx, MY_COEF *mycoef, MY_FLOAT *myfloat, double *value);
int taylor_set_jet(MY_JET a, MY_COEF *mycoefs, MY_FLOAT *myfloats, double *values, int include_state);

/* Convert Jet to array */
MY_COEF *taylor_convert_jet_to_array(MY_JET a, int include_state);

/* Input/Output Jet */
int taylor_input_jet_from_stdin(MY_JET a, int idx) ;
int taylor_input_jet_from_string(MY_JET a, const char *str);
int taylor_output_jet(FILE *file, const char *fmt, MY_JET a);

/* Init/Cleanup Library/Jet */
void taylor_initialize_jet_library();
void taylor_initialize_jet_library2(int nsymbs, int degree);
void taylor_initialize_jet_variable(MY_JET *jet);
void taylor_clear_jet_variable(MY_JET *jet);
void taylor_clear_up_jet_library();
int taylor_set_jet_variable_number_of_symbols(int);
int taylor_set_jet_variable_degree(int);

void taylor_jet_reduce(MY_JET, double *);
MY_FLOAT *taylor_get_jet_data_array(MY_JET);
const char **taylor_get_variable_names();
const char **taylor_get_jet_monomials();

/* END... JET IO Helpers */


MY_FLOAT **taylor_coefficients_ode(MY_FLOAT t, MY_FLOAT *x, int order);

MY_FLOAT **taylor_coefficients_odeA(MY_FLOAT t, MY_FLOAT *x, int order, int reuse_last_computation);

MY_FLOAT **taylor_coefficients_ode_A(MY_FLOAT t, MY_FLOAT *x, int order, int reuse_last_computation, MY_JET *jetIn, MY_JET ***jetOut);
int       taylor_step_ode(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut);

int       taylor_uniform_step_ode_tag(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut,int tag);

int       taylor_uniform_step_ode(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut);

int       taylor_step_ode_Twelve(MY_FLOAT *ti, MY_FLOAT *x, int dir, int step_ctl,
                         double log10abserr, double log10relerr,
                         MY_FLOAT *endtime, MY_FLOAT *ht, int *order, MY_JET *jetInOut, MY_FLOAT ***s_return, MY_JET ***jet_return);


MY_FLOAT *pxval(MY_FLOAT t, MY_FLOAT *in, MY_FLOAT *out, MY_JET *sIn, MY_JET ***sOut);
MY_FLOAT *pxval_derivative(MY_FLOAT t, MY_FLOAT *in, MY_FLOAT *out, MY_JET *sIn, MY_JET ***sOut);
MY_FLOAT **pxval_taylor_coefficients(MY_FLOAT t, MY_FLOAT *in, int order, MY_JET *sIn, MY_JET ***sOut);
/************************************************************************/

#ifdef __cplusplus
}
#endif
